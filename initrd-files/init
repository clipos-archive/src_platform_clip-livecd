#!/bin/sh
# SPDX-License-Identifier: LGPL-2.1-or-later
# Copyright Â© 2008-2018 ANSSI. All Rights Reserved.

. /etc/initrd.defaults
. /etc/initrd.scripts

splash() {
	return 0
}

[ -e /etc/initrd.splash ] && . /etc/initrd.splash

# Clean input/output
exec >${CONSOLE} <${CONSOLE} 2>&1

if [ "$$" != '1' ]
then
	echo '/linuxrc has to be run as the init process as the one'
	echo 'with a PID of 1. Try adding init="/linuxrc" to the'
	echo 'kernel command line or running "exec /linuxrc".'
	exit 1
fi

mount -t proc proc /proc >/dev/null 2>&1
mount -o remount,rw /dev/ram0 / >/dev/null 2>&1

# Set up symlinks
/bin/busybox --install -s

if [ "$0" = '/init' ]
then
	[ -e /linuxrc ] && rm /linuxrc
	 
	if [ -e /bin/lvm ]
	then
		ln -s /bin/lvm /bin/vgscan
		ln -s /bin/lvm /bin/vgchange
	fi
fi

quiet_kmsg

CMDLINE=`cat /proc/cmdline`
# Scan CMDLINE for any specified real_root= or cdroot arguments
FAKE_ROOT=''
REAL_ROOTFLAGS=''
CRYPT_SILENT=0

splash 'init'

cmdline_hwopts

# Mount sysfs
mount_sysfs

# Setup hotplugging for firmware loading
setup_hotplug

# Delay if needed for USB hardware
sdelay

# Start device manager
start_dev_mgr

# Setup md device nodes if they dont exist
setup_md_device

# Scan volumes
startVolumes

setup_keymap

mkdir -p "${NEW_ROOT}"
CHROOT="${NEW_ROOT}"

# Run debug shell if requested
rundebugshell

good_msg "Making tmpfs for ${NEW_ROOT}"
mount -n -t tmpfs tmpfs "${NEW_ROOT}"

for i in dev mnt mnt/cdrom mnt/livecd mnt/key tmp tmp/.initrd mnt/gentoo run sys
do
	mkdir -p "${NEW_ROOT}/${i}"
	chmod 755 "${NEW_ROOT}/${i}"
done
[ ! -e "${NEW_ROOT}/dev/null" ] && mknod "${NEW_ROOT}"/dev/null c 1 3
[ ! -e "${NEW_ROOT}/dev/console" ] && mknod "${NEW_ROOT}"/dev/console c 5 1

# Required for splash to work.  Not an issue with the initrd as this
# device isn't created there and is not needed.
if [ -e /dev/tty1 ]
then
	[ ! -e "${NEW_ROOT}/dev/tty1" ] && mknod "${NEW_ROOT}/dev/tty1" c 4 1
fi

bootstrapCD
bootstrapNFS

if [ "${REAL_ROOT}" = '' ]
then
	echo -n -e "${WARN}>>${NORMAL}${BOLD} No bootable medium found. Waiting for new devices"
	
	COUNTER=0
	while [ ${COUNTER} -lt 3 ]; do
		sleep 3
		echo -n '.'
		let COUNTER=${COUNTER}+1
	done

	sleep 1
	echo -e "${NORMAL}"
	bootstrapCD
fi

if [ "${REAL_ROOT}" = '' ]
then
	# Undo stuff
	umount  "${NEW_ROOT}/dev" 2>/dev/null
	umount  "${NEW_ROOT}/sys" 2>/dev/null

	umount  "${NEW_ROOT}"
	rm -rf  "${NEW_ROOT}/*"

	bad_msg 'Could not find CD to boot, something else needed!'
	exec /bin/sh
fi

# Determine root device
good_msg 'Determining root device...'
while true
do
	while [ "${got_good_root}" != '1' ]
	do
		case "${REAL_ROOT}" in
			LABEL\=*|UUID\=*)
			
				ROOT_DEV=""
				retval=1
				
				if [ "${retval}" -ne '0' ]; then
					ROOT_DEV=`findfs "${REAL_ROOT}" 2>/dev/null`
					retval=$?
				fi
				
				if [ "$retval" -ne '0' ]; then
					ROOT_DEV=`busybox findfs "${REAL_ROOT}" 2>/dev/null`
					retval=$?
				fi
				
				if [ "${retval}" -ne '0' ]; then
					ROOT_DEV=`blkid -t "${REAL_ROOT}" | cut -d ":" -f 1 2>/dev/null`
					retval=$?
				fi
				
				if [ "${retval}" -eq '0' ] && [ -n "${ROOT_DEV}" ]; then
					good_msg "Detected real_root=${ROOT_DEV}"
					REAL_ROOT="${ROOT_DEV}"
				else
					whereis "REAL_ROOT" "root block device"
					got_good_root=0
					continue
				fi
				;;
		esac
				
		if [ "${REAL_ROOT}" = '' ]
		then
			# No REAL_ROOT determined/specified. Prompt user for root block device.
			whereis "REAL_ROOT" "root block device"
			got_good_root=0

		elif [ "${REAL_ROOT}" = "/dev/nfs" ]
		then
			good_msg "Detected NFS real root"
			#LOOP=${NEW_ROOT}/image.squashfs
			got_good_root=1

		elif [ -b "${REAL_ROOT}" ] 
		then
			got_good_root=1

		else
			bad_msg "Block device ${REAL_ROOT} is not a valid root device..."
			REAL_ROOT=""
			got_good_root=0
		fi
	done


	if [ "${got_good_root}" = '1' ]
	then
		# CD already mounted; no further checks necessary
		break
	else
		good_msg "Mounting root..."

		# mount ro so fsck doesn't barf later
		if [ "${REAL_ROOTFLAGS}" = '' ]; then
			mount -o ro ${REAL_ROOT} ${NEW_ROOT}
		else
			good_msg "Using mount -o ro,${REAL_ROOTFLAGS}"
			mount -o ro,${REAL_ROOTFLAGS} ${REAL_ROOT} ${NEW_ROOT}
		fi
		
		# If mount is successful break out of the loop 
		# else not a good root and start over.
		if [ "$?" = '0' ]
		then
			if [ -d ${NEW_ROOT}/dev -a -x ${NEW_ROOT}/sbin/init ] 
			then
				break
			else
				bad_msg "The filesystem mounted at ${REAL_ROOT} does not appear to be a valid /, try again"
				got_good_root=0
				REAL_ROOT=''
			fi
		else
			bad_msg "Could not mount specified ROOT, try again"
			got_good_root=0
			REAL_ROOT=''
		fi
	fi
done
# End determine root device

#verbose_kmsg

# If CD root is set determine the looptype to boot
good_msg 'Determining looptype ...'
cd "${NEW_ROOT}"

# Find loop and looptype
[ -z "${LOOP}" ] && LOOP=/image.squashfs
[ -z "${LOOPTYPE}" ] && LOOPTYPE=squashfs

cache_cd_contents

good_msg 'Mounting squashfs filesystem'
mount -t squashfs -o loop,ro "${NEW_ROOT}/mnt/cdrom/${LOOPEXT}${LOOP}" "${NEW_ROOT}/mnt/livecd"
test_success 'Mount filesystem'
FS_LOCATION='mnt/livecd'

good_msg "Copying read-write image contents to tmpfs"
# Copy over stuff that should be writable
(cd "${NEW_ROOT}/${FS_LOCATION}"; cp -a ${ROOT_TREES} "${NEW_ROOT}")

# Now we do the links.
for x in ${ROOT_LINKS}
do
	if [ -L "${NEW_ROOT}/${FS_LOCATION}/${x}" ]
	then
		ln -s "`readlink ${NEW_ROOT}/${FS_LOCATION}/${x}`" "${x}"  2>/dev/null
	else
		# List all subdirectories of x
		find "${NEW_ROOT}/${FS_LOCATION}/${x}" -type d 2>/dev/null | while read directory
		do
			# Strip the prefix of the FS_LOCATION
			directory="${directory#${NEW_ROOT}/${FS_LOCATION}/}"

			# Skip this directory if we already linked a parent directory
			if [ "${curent_parrent}" != '' ]; then
				var=`echo "${directory}" | grep "^${curent_parrent}"`
				if [ "${var}" != '' ]; then
					continue
				fi
			fi
			# Test if the directory exists already
			if [ -e "/${NEW_ROOT}/${directory}" ]
			then
				# It does exist, link all the individual files
				for file in `ls /${NEW_ROOT}/${FS_LOCATION}/${directory}`
				do
				if [ ! -d "/${NEW_ROOT}/${FS_LOCATION}/${directory}/${file}" ] && [ ! -e "${NEW_ROOT}/${directory}/${file}" ]; then
						ln -s "/${FS_LOCATION}/${directory}/${file}" "${directory}/${file}" 2>/dev/null
					fi
				done
			else
				# It does not exist, make a link to the livecd
				ln -s "/${FS_LOCATION}/${directory}" "${directory}" 2>/dev/null
				current_parent="${directory}"
			fi
		done
	fi
done

mkdir initramfs proc tmp sys run 2>/dev/null
chmod 1777 tmp

# Let Init scripts know that we booted from CD
CDBOOT="yes"
export CDBOOT="yes"
check_slowusb
if [ "${DO_slowusb}" ] || [ "${FORCE_slowusb}" ]
then
	sleep 10
fi

# Execute script on the cdrom just before boot to update things if necessary
cdupdate

# Finally, we create the mirrors
ln -sf /mnt/cdrom/mirrors "${CHROOT}/mirrors"


if [ "${SUBDIR}" != '' -a -e "${CHROOT}/${SUBDIR}" ]
then
	good_msg "Entering ${SUBDIR} to boot"
	CHROOT="${CHROOT}/${SUBDIR}"
fi

verbose_kmsg

echo -ne "${GOOD}>>${NORMAL}${BOLD} Booting (initramfs)${NORMAL}"
if [ ! -e "${CHROOT}/dev/console" ] || [ ! -e "${CHROOT}/dev/null" ]
then
	echo -ne "${BAD}>>${NORMAL}${BOLD} ERROR: your real /dev is missing files required to boot (console and null)${NORMAL}"
elif [ -e /etc/initrd.splash -a ! -e "${CHROOT}/dev/tty1" ]
then
	echo -ne "${BAD}>>${NORMAL}${BOLD} ERROR: your real /dev is missing tty1, which is required for splash${NORMAL}"
fi

cd "${CHROOT}"
mkdir "${CHROOT}/proc" "${CHROOT}/sys" 2>/dev/null
echo -ne "${BOLD}.${NORMAL}"
umount /sys || echo '*: Failed to unmount the ramdisk /sys!'
umount /proc || echo '*: Failed to unmount the ramdisk /proc!'
echo -e "${BOLD}.${NORMAL}"

touch "${CHROOT}/fastboot"
exec /sbin/switch_root -c "/dev/console" "${CHROOT}" "${REAL_INIT:-/sbin/init}" "${INIT_OPTS}"

# If we get here, something bad has happened
splash 'verbose'

echo 'A fatal error has probably occured since /sbin/init did not'
echo 'boot correctly. Trying to open a shell...'
echo
exec /bin/sh
